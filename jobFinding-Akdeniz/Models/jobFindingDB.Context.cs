//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace jobFinding_Akdeniz.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBEntities : DbContext
    {
        public DBEntities()
            : base("name=DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<admin_log> admin_log { get; set; }
        public virtual DbSet<business_stream> business_stream { get; set; }
        public virtual DbSet<company> company { get; set; }
        public virtual DbSet<countries> countries { get; set; }
        public virtual DbSet<departments> departments { get; set; }
        public virtual DbSet<job_location> job_location { get; set; }
        public virtual DbSet<job_post> job_post { get; set; }
        public virtual DbSet<job_post_activity> job_post_activity { get; set; }
        public virtual DbSet<job_type> job_type { get; set; }
        public virtual DbSet<languages> languages { get; set; }
        public virtual DbSet<universities> universities { get; set; }
        public virtual DbSet<user_account> user_account { get; set; }
        public virtual DbSet<user_admin> user_admin { get; set; }
        public virtual DbSet<user_education> user_education { get; set; }
        public virtual DbSet<user_experinence_detail> user_experinence_detail { get; set; }
        public virtual DbSet<user_language_skill> user_language_skill { get; set; }
        public virtual DbSet<user_log> user_log { get; set; }
        public virtual DbSet<user_student> user_student { get; set; }
        public virtual DbSet<user_teacher> user_teacher { get; set; }
        public virtual DbSet<user_type> user_type { get; set; }
        public virtual DbSet<company_log> company_log { get; set; }
        public virtual DbSet<business_departments> business_departments { get; set; }
    
        public virtual int sp_InsertStudent(string userEmail, string firstName, string lastName, string userPassword, string userIsActive, string userIsConfirmed, string statusStd, string degreeName, string universityName, string startingDate, string endingDate, Nullable<double> gANO, Nullable<int> gANOINT, string department)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("userEmail", userEmail) :
                new ObjectParameter("userEmail", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("userPassword", userPassword) :
                new ObjectParameter("userPassword", typeof(string));
    
            var userIsActiveParameter = userIsActive != null ?
                new ObjectParameter("userIsActive", userIsActive) :
                new ObjectParameter("userIsActive", typeof(string));
    
            var userIsConfirmedParameter = userIsConfirmed != null ?
                new ObjectParameter("userIsConfirmed", userIsConfirmed) :
                new ObjectParameter("userIsConfirmed", typeof(string));
    
            var statusStdParameter = statusStd != null ?
                new ObjectParameter("statusStd", statusStd) :
                new ObjectParameter("statusStd", typeof(string));
    
            var degreeNameParameter = degreeName != null ?
                new ObjectParameter("degreeName", degreeName) :
                new ObjectParameter("degreeName", typeof(string));
    
            var universityNameParameter = universityName != null ?
                new ObjectParameter("universityName", universityName) :
                new ObjectParameter("universityName", typeof(string));
    
            var startingDateParameter = startingDate != null ?
                new ObjectParameter("startingDate", startingDate) :
                new ObjectParameter("startingDate", typeof(string));
    
            var endingDateParameter = endingDate != null ?
                new ObjectParameter("endingDate", endingDate) :
                new ObjectParameter("endingDate", typeof(string));
    
            var gANOParameter = gANO.HasValue ?
                new ObjectParameter("GANO", gANO) :
                new ObjectParameter("GANO", typeof(double));
    
            var gANOINTParameter = gANOINT.HasValue ?
                new ObjectParameter("GANOINT", gANOINT) :
                new ObjectParameter("GANOINT", typeof(int));
    
            var departmentParameter = department != null ?
                new ObjectParameter("department", department) :
                new ObjectParameter("department", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertStudent", userEmailParameter, firstNameParameter, lastNameParameter, userPasswordParameter, userIsActiveParameter, userIsConfirmedParameter, statusStdParameter, degreeNameParameter, universityNameParameter, startingDateParameter, endingDateParameter, gANOParameter, gANOINTParameter, departmentParameter);
        }
    
        public virtual int sp_InsertTeacher(string userEmail, string firstName, string lastName, string userPassword, string userIsActive, string userIsConfirmed, string degree, string universityName, string description)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("userEmail", userEmail) :
                new ObjectParameter("userEmail", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("userPassword", userPassword) :
                new ObjectParameter("userPassword", typeof(string));
    
            var userIsActiveParameter = userIsActive != null ?
                new ObjectParameter("userIsActive", userIsActive) :
                new ObjectParameter("userIsActive", typeof(string));
    
            var userIsConfirmedParameter = userIsConfirmed != null ?
                new ObjectParameter("userIsConfirmed", userIsConfirmed) :
                new ObjectParameter("userIsConfirmed", typeof(string));
    
            var degreeParameter = degree != null ?
                new ObjectParameter("degree", degree) :
                new ObjectParameter("degree", typeof(string));
    
            var universityNameParameter = universityName != null ?
                new ObjectParameter("universityName", universityName) :
                new ObjectParameter("universityName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertTeacher", userEmailParameter, firstNameParameter, lastNameParameter, userPasswordParameter, userIsActiveParameter, userIsConfirmedParameter, degreeParameter, universityNameParameter, descriptionParameter);
        }
    }
}
